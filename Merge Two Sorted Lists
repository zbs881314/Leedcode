'''
Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.

Example:

Input: 1->2->4, 1->3->4
Output: 1->1->2->3->4->4
'''

# answer

'''
Approach 1: Recursion

Intuition

We can recursively define the result of a merge operation on two lists as the following (avoiding the corner case logic 
surrounding empty lists):

{list1[0]+merge(list1[1:],list2)  list1[0]<list2[0]
{list2[0]+merge(list1,list2[1:])   otherwise 
Namely, the smaller of the two lists' heads plus the result of a merge on the rest of the elements.

Algorithm

We model the above recurrence directly, first accounting for edge cases. Specifically, if either of l1 or l2 is initially null, 
there is no merge to perform, so we simply return the non-null list. Otherwise, we determine which of l1 and l2 has a smaller head,
and recursively set the next value for that head to the next merge result. Given that both lists are null-terminated, the 
recursion will eventually terminate.

# java

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        else if (l2 == null) {
            return l1;
        }
        else if (l1.val < l2.val) {
            l1.next = mergeTwoLists(l1.next, l2);
            return l1;
        }
        else {
            l2.next = mergeTwoLists(l1, l2.next);
            return l2;
        }
    }
}

# time complexity O(n+m)
# space complexity O(n+m)


'''
Approach 2: Iteration

Intuition

We can achieve the same idea via iteration by assuming that l1 is entirely less than l2 and processing the elements one-by-one, 
inserting elements of l2 in the necessary places in l1.

Algorithm

First, we set up a false "prehead" node that allows us to easily return the head of the merged list later. We also maintain a 
prev pointer, which points to the current node for which we are considering adjusting its next pointer. Then, we do the 
following until at least one of l1 and l2 points to null: if the value at l1 is less than or equal to the value at l2, then 
we connect l1 to the previous node and increment l1. Otherwise, we do the same, but for l2. Then, regardless of which list we 
connected, we increment prev to keep it one step behind one of our list heads.

After the loop terminates, at most one of l1 and l2 is non-null. Therefore (because the input lists were in sorted order), if 
either list is non-null, it contains only elements greater than all of the previously-merged elements. This means that we can 
simply connect the non-null list to the merged list and return it.

# java

class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // maintain an unchanging reference to node ahead of the return node.
        ListNode prehead = new ListNode(-1);
        
        ListNode prev = prehead;
        while (l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                prev.next = l1;
                l1 = l1.next;
            } else {
                prev.next = l2;
                l2 = l2.next;
            }
            prev = prev.next;
        }
        
        // exactly one of l1 and l2 can be non-null at this point, so connect
        // the non-null list to the end of the merged lists.
        prev.next = l1 == null ? l2 : l1;
        return prehead.next;
    }
}

# time complexity O(n+m)
# space complexity O(1)



        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
