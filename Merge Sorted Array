'''
Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.

Note:

    The number of elements initialized in nums1 and nums2 are m and n respectively.
    You may assume that nums1 has enough space (size that is greater or equal to m + n) to hold additional elements from nums2.

Example:

Input:
nums1 = [1,2,3,0,0,0], m = 3
nums2 = [2,5,6],       n = 3

Output: [1,2,2,3,5,6]
'''
# answer
# JAVA
'''
Approach 2 : Two pointers / Start from the beginning

Intuition

Typically, one could achieve O(n+m) time complexity in a sorted array(s) with the help of two pointers approach.

The straightforward implementation would be to set get pointer p1 in the beginning of nums1, p2 in the beginning of nums2, 
and push the smallest value in the output array at each step.

Since nums1 is an array used for output, one has to keep first m elements of nums1 somewhere aside, that means 
O(m) space complexity for this approach.
'''
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        //make a copy of nums1
        int[] nums1_copy = new int[m];
        System.arraycopy(nums1, 0, nums1_copy, 0, m);
        
        //Two get pointers for nums1_copy and nums2.
        int p1 = 0;
        int p2 = 0;
        
        //set pointer for nums1
        int p = 0;
        
        //compute elements from nums1_copy and nums2
        //and add the smallest one into nums1.
        while ((p1 < m) && (p2 < n))
            nums1[p++] = (nums1_copy[p1] < nums2[p2]) ? nums1_copy[p1++] : nums2[p2++];
            
        //if there are still elements to add
        if (p1 < m)
            System.arraycopy(nums1_copy, p1, nums1, p1+p2, m+n-p1-p2);
        if (p2 < n)
            System.arraycopy(nums2, p2, nums1, p1+p2, m+n-p1-p2);
    }
}


'''
Approach 3 : Two pointers / Start from the end

Intuition

Approach 2 already demonstrates the best possible time complexity O(n+m) but still uses an additional space. 
This is because one has to keep somewhere the elements of array nums1 while overwriting it starting from the beginning.

What if we start to overwrite nums1 from the end, where there is no information yet? Then no additional space is needed.
'''
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        //two get pointers for nums1 and nums2
        int p1 = m - 1;
        int p2 = n - 1;
        //set pointer for nums1
        int p = m + n - 1;
        
        //while there are still elements to compare
        while ((p1 >= 0) && (p2 >= 0))
            //compare two elements form nums1 and nums2
            //and add the largest one in nums1
            nums1[p--] = (nums1[p1] < nums2[p2]) ? nums2[p2--] : nums1[p1--];
            
        // add missing elements from nums2
        System.arraycopy(nums2, 0, nums1, 0 , p2 + 1);
    }
}





















