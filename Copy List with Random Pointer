'''
A linked list is given such that each node contains an additional random pointer which could point to any node in the list or null.

Return a deep copy of the list.


Example 1:

Input:
{"$id":"1","next":{"$id":"2","next":null,"random":{"$ref":"2"},"val":2},"random":{"$ref":"2"},"val":1}

Explanation:
Node 1's value is 1, both of its next and random pointer points to Node 2.
Node 2's value is 2, its next pointer points to null and its random pointer points to itself.

Note:

    You must return the copy of the given head as a reference to the cloned list.

Hint #1
Just iterate the linked list and create copies of the nodes on the go. Since a node can be referenced from multiple nodes due 
to the random pointers, make sure you are not making multiple copies of the same node.

Hint #2
You may want to use extra space to keep old node ---> new node mapping to prevent creating multiples copies of same node.

Hint #3
We can avoid using extra space for old node ---> new node mapping, by tweaking the original linked list. Simply interweave the 
nodes of the old and copied list. For e.g.

Old List: A --> B --> C --> D
InterWeaved List: A --> A' --> B --> B' --> C --> C' --> D --> D'

Hint #4
The interweaving is done using next pointers and we can make use of interweaved structure to get the correct reference nodes for 
random pointers.
'''

# answer

'''
Lets first look at how the linked list looks like

In the above diagram, for a given node the next pointer points to the next node in the linked list. The next pointer is something 
standard for a linked list and this is what links the nodes together. What is interesting about the diagram and this problem is 
the random pointer which, as the name suggests can point to any node in the linked list or can be a null.


Approach 1: Recursive
Intuition

The basic idea behind the recursive solution is to consider the linked list like a graph. Every node of the Linked List has 2 
pointers (edges in a graph). Since, random pointers add the randomness to the structure we might visit the same node again 
leading to cycles.

In the diagram above we can see the random pointer points back to the previously seen node hence leading to a cycle. We need to 
take care of these cycles in the implementation.

All we do in this approach is to just traverse the graph and clone it. Cloning essentially means creating a new node for every 
unseen node you encounter. The traversal part will happen recursively in a depth first manner. Note that we have to keep track 
of nodes already processed because, as pointed out earlier, we can have cycles because of the random pointers.
Algorithm

    1.Start traversing the graph from head node.

    Lets see the linked structure as a graph. Below is the graph representation of the above linked list example.

    In the above example head is where we begin our graph traversal.

    2.If we already have a cloned copy of the current node in the visited dictionary, we use the cloned node reference.

    3.If we don't have a cloned copy in the visited dictionary, we create a new node and add it to the visited dictionary. 
      visited_dictionary[current_node] = cloned_node_for_current_node.

    4.We then make two recursive calls, one using the random pointer and the other using next pointer. The diagram from step 1, 
      shows random and next pointers in red and blue color respectively. Essentially we are making recursive calls for the 
      children of the current node. In this implementation, the children are the nodes pointed by the random and the next pointers.

cloned_node_for_current_node.next = copyRandomList(current_node.next);
cloned_node_for_current_node.random = copyRandomList(current_node.random);

# java

/*
// definition for a node.
class Node {
    public int val;
    public Node next;
    public Node random;
    
    public Node() {}
    
    public Node(int _val, Node _next, Node _random) {
        val = val;
        next = _next;
        random = _random;
    }
};

*/
public class Solution {
    // HashMap which holds old nodes as keys and new nodes as its value.
    HashMap<Node, Node> visitedHash = new HashMap<Node, Node>();
    
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        
        // if we have already processed the current node, then we simply return the cloud versions of
        // it
        if (this.visitedHash.containsKey(head)) {
            return this.visitedHash.get(head);
        }
        
        // create a new node with the value same as old node.
        Node node = new Node(head.val, null, null);
        
        // save this value in the hash map. this is needed since there might be
        // loops during traversal due to randomness of random pointers and this would help us void 
        // them
        this.visitedHash.put(head, node);
        
        // recursively copy the remaining linked list starting once from the next pointer and then from
        // the random pointer.
        // thus we have two independent recursive calls.
        // finally we update the next and random pointers for the new node created
        node.next = this.copyRandomList(head.next);
        node.random = this.copyRandomList(head.random);
        
        return node;
    }
}

# time complexity O(n)
# space complexity O(n)

'''
Approach 2: Iterative with O(N)O(N)O(N) Space

Intuition

The iterative solution to this problem does not model it as a graph, instead simply treats it as a LinkedList. When we are 
iterating over the list, we can create new nodes via the random pointer or the next pointer whichever points to a node that 
doesn't exist in our old --> new dictionary.

Algorithm

    1.Traverse the linked list starting at head of the linked list.
    2.Random Pointer

       1).If the random pointer of the current node i points to the a node j and a clone of j already exists in the 
          visited dictionary, we will simply use the cloned node reference from the visited dictionary.
       2).If the random pointer of the current node i points to the a node j which has not been created yet, we create a 
          new node corresponding to j and add it to the visited dictionary.
    3.Next Pointer

       1).If the next pointer of the current node i points to the a node j and a clone of j already exists in the visited 
          dictionary, we will simply use the cloned node reference from the visited dictionary.
       2).If the next pointer of the current node i points to the a node j which has not been created yet, we create a new 
          node corresponding to j and add it to the visited dictionary.
    4.We repeat steps 2 and 3 until we reach the end of the linked list.

    Also, the next pointer of node B points to an already visited node C. Hence in step 3, we don't create a new copy for 
    the clone. Instead we point next pointer of cloned node B′ to already existing cloned node C′.

'''
# java

/*
// definition for a node.
class Node {
    public int val;
    public Node next;
    public Node random;
    
    public Node() {}
    
    public Node(int _val, Node _next, Node _random) {
        val = val;
        next = _next;
        random = _random;
    }
};

*/
public class Solution {
    // visited dictionary to hold old node reference as "key" and new node reference as the "value"
    HashMap<Node, Node> visited = new HashMap<Node, Node>();
    
    public Node getClonedNode(Node node) {
        // if the node exists then
        if (node != null) {
            // check if the node is in the visited dictionary
            if (this.visited.containsKey(node)) {
                // if its in the visited dictionary then return the new node reference from the dictionary
                return this.visited.get(node);
            } else {
                // otherwise create a new node, add to the dictionary and return it
                this.visited.put(node, new Node(node.val, null, null));
                return this.visited.get(node);
            }
        }
        return null;
    }
    
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        
        Node oldNode = head;
        
        // creating the new head node
        Node newNode = new Node(oldNode.val);
        this.visited.put(oldNode, newNode);
        
        // iterate on the linked list until all nodes are cloned.
        while (oldNode != null) {
            //get the clones of the nodes referenced by random and next pointers.
            newNode.random = this.getClonedNode(oldNode.random);
            newNode.next = this.getClonedNode(oldNode.next);
            
            // move one step ahead in the linked list
            oldNode = oldNode.next;
            newNode = newNode.next;
        }
        return this.visited,get(head);
    }
}

# time complexity O(n)
# space complexity O(n)


'''
Approach 3: Iterative with O(1) Space

Intuition

Instead of a separate dictionary to keep the old node --> new node mapping, we can tweak the original linked list and keep 
every cloned node next to its original node. This interleaving of old and new nodes allows us to solve this problem without 
any extra space. Lets look at how the algorithm works.

'''

# java

/*
// definition for a node.
class Node {
    public int val;
    public Node next;
    public Node random;
    
    public Node() {}
    
    public Node(int _val, Node _next, Node _random) {
        val = val;
        next = _next;
        random = _random;
    }
};

*/

pulic class Solution {
    public Node copyRandomList(Node head) {
        if (head == null) {
            return null;
        }
        
        // creating a new weaved list of original and copied nodes.
        Node ptr = head;
        while (ptr != null) {
            // cloned node
            Node newNode = new Node(ptr.val);
            
            // Inserting the cloned node just next to the original node.
            // If A->B->C is the original linked list
            // linked list after weaving cloned nodes would be A->A'->B->B'->C->C'
            newNode.next = ptr.next;
            ptr.next = newNode;
            ptr = newNode.next;
        }
        
        ptr = head;
        
        // Now link the random pointers of the new nodes created
        // Iterate the newly created list and use the original nodes'random pointers,
        // to assign reference to random pointers for cloned nodes
        while (ptr != null) {
            ptr.next.random = (ptr.random != null) ? ptr.random.next : null;
            ptr = ptr.next.next;
        }
        
        // Unweave the linked list to get back the original linked list and the cloned list
        // i.e. A->A'->B->B'->C->C' would be broken to A->B->C and A'->B'->C'
        Node ptr_old_list = head; // A->B->C
        Node ptr_new_list = head.next; // A'->B'->C'
        Node head_old = head.next;
        while (ptr_old_list != null) {
            ptr_old_list.next = ptr_old_list.next.next;
            ptr_new_list.next = (ptr_new_list.next != null) ? ptr_new_list.next.next : null;
            ptr_old_list = ptr_old_list.next;
            ptr_new_list = ptr_new_list.next;
        }
        return head_old;
    }
}

# time complexity O(n)
# space complexity O(1)








































