'''
Given two strings s and t, determine if they are both one edit distance apart.

Note: 

There are 3 possiblities to satisify one edit distance apart:

    Insert a character into s to get t
    Delete a character from s to get t
    Replace a character of s to get t

Example 1:

Input: s = "ab", t = "acb"
Output: true
Explanation: We can insert 'c' into s to get t.

Example 2:

Input: s = "cab", t = "ad"
Output: false
Explanation: We cannot get t from s by only one step.

Example 3:

Input: s = "1203", t = "1213"
Output: true
Explanation: We can replace '0' with '1' to get t.
'''
# answer
'''
Approach 1: One pass algorithm

Intuition

First of all, let's ensure that the string lengths are not too far from each other. If the length difference is 2 or 
more characters, then s and t couldn't be one edit away strings.

compute  s = "abcdef", t = "abcd" couldn't be one edit away strings

For the next let's assume that s is always shorter or the same length as t. If not, one could always call isOneEditDistance(t, s) 
to inverse the string order.

Now it's time to pass along the strings and to look for the first different character.

If there is no differences between the first len(s) characters, only two situations are possible :

    The strings are equal.

    The strings are one edit away distance.

the strings are equal s = "abcd", t = "abcd". the strings are one edit distance s = "abcd", t = "abcde".

Now what if there is a different character so that s[i] != t[i].

    If the strings are of the same length, all next characters should be equal to keep one edit away distance. To verify it, 
    one has to compare the substrings of s and t both starting from the i + 1th character.

    If t is one character longer than s, the additional character t[i] should be the only difference between both strings. 
    To verify it, one has to compare a substring of s starting from the ith character and a substring of t starting from 
    the i + 1th character.

the strings are of the same length s = "abxcd", t = "abycd" s(i, n) should be equal to t(i, n). the strings have different lengths s = "abcd", t = "abxcd", s(i, n)
should be equal to t(i+1, n+1).
'''
# JAVA

class Solution {
    public boolean isOneEditDistance(String s, String t) {
        int ns = s.length();
        int nt = t.length();
        
        //ensure that s is shorter than t.
        if (ns > nt)
            return isOneEditDistance(t, s);
          
        //the string are NOT one edit away distance
        //if the length diff is more than 1.
        if (nt - ns > 1)
            return false;
        
        for (int i = 0; i < ns; i++)
            if (s.charAt(i) != t.charAt(i))
                //if strings have the same length
                if (ns == nt)
                    return s.substring(i + 1).equals(t.substring(i + 1));
                //if strings have different lengths
                else
                    return s.substring(i).equals(t.substring(i + 1));
        
        //if there is no diffs on ns distance
        //the strings are one edit away only if
        //t has one more character.
        return (ns + 1 == nt);
    }
}

# time complexity O(n)
# space complexity O(n)






























