'''
Given a string S and a string T, find the minimum window in S which will contain all the characters in T in complexity O(n).

Example:

Input: S = "ADOBECODEBANC", T = "ABC"
Output: "BANC"

Note:

    If there is no such window in S that covers all characters in T, return the empty string "".
    If there is such window, you are guaranteed that there will always be only one unique minimum window in S.
'''
# answer
# JAVA
'''
Approach 1: Sliding Window

Intuition

The question asks us to return the minimum window from the string S which has all the characters of the string T. 
Let us call a window desirable if it has all the characters from T.

We can use a simple sliding window approach to solve this problem.

In any sliding window based problem we have two pointers. One right pointer whose job is to expand the current window and 
then we have the left pointer whose job is to contract a given window. At any point in time only one of these pointers 
move and the other one remains fixed.

The solution is pretty intuitive. We keep expanding the window by moving the right pointer. When the window has all the desired 
characters, we contract (if possible) and save the smallest window till now.

The answer is the smallest desirable window.

For eg. S = "ABAACBAB" T = "ABC". Then our answer window is "ACB" and shown below is one of the possible desirable windows.

Algorithm

    We start with two pointers, left and right initially pointing to the first element of the string S.

    We use the right pointer to expand the window until we get a desirable window i.e. a window that contains all of the 
    characters of T.

    Once we have a window with all the characters, we can move the left pointer ahead one by one. If the window is still a 
    desirable one we keep on updating the minimum window size.

    If the window is not desirable any more, we repeat step  2step onwards.
    
    1. initial state: left and right pointers are at index 0.
    2. moving the right pointer until the window has all the elements from string T. record this desirable window.
    3. now move the left pointer. notice the window is still desirable and smaller than the previous window.

The above steps are repeated until we have looked at all the windows. The smallest window is returned.
    4. after moving left pointer again, the window is no more desirable. hence we need to increment the right pointer and look for another desirable window.
    5. we again have a desirable window. now we can contract the window by moving ahead left pointer and see if the window is still desirable.
    6. the window shown is the smallest desirable window for this example. we continue these steps on the remaining array to see if there is even smaller desirble window possible.
'''
class Solution {
    public String minWindow(String s, String t) {
        if (s.length() == 0 || t.length() == 0) {
            return "";
        }
        
        //dictionary which keeps a count of all the unique characters in t.
        Map<Character, Integer> dictT = new HashMap<Character, Integer>();
        for (int i = 0; i < t.length(); i++) {
            int count = dictT.getOrDefault(t.charAt(i), 0);
            dictT.put(t.charAt(i), count + 1);
        }
        
        //number of unique characters in t, which need to present in the desired window.
        int required = dictT.size();
        
        //left and right pointer
        int l = 0, r = 0;
        
        //formed is used to keep track of how many unique characters in t
        //are present in the current window in its desired frequency.
        //e.g. if t is 'AABC' then the window must have two A's, one B and one C
        //thus formed would be = 3 when all these conditions are met.
        int formed = 0;
        
        //dictionary which keeps a count of all the unique characters in the current window.
        Map<Character, Integer> windowCounts = new HashMap<Character, Integer>();
        
        //ans list of the form (window length, left, right)
        int[] ans = {-1, 0, 0};
        
        while (r < s.length()) {
            //add one character from the right to the window
            char c = s.charAt(r);
            int count = windowCounts.getOrDefault(c, 0);
            windowCounts.put(c, count + 1);
            
            //if the frequency of the current character added equals to the 
            //desired count in t then increment the formed count by 1.
            if (dictT.containsKey(c) && windowCounts.get(c).intValue() == dictT.get(c).intValue()) {
                formed++;
            }
            
            //try and contract the window till the point where it ceases to be 'desirable'.
            while (l <= r && formed == required) {
                c = s.charAt(l);
                //save the smallest window until now.
                if (ans[0] == -1 || r - l + 1 < ans[0]) {
                    ans[0] = r - l + 1;
                    ans[1] = l;
                    ans[2] = r;
                }
                
                //the character at the position pointed by the
                //'left' pointer is no longer a part of the window.
                windowCounts.put(c, windowCounts.get(c) - 1);
                if (dictT.containKey(c) && windowCounts.get(c).intValue() < dictT.get(c).intValue()) {
                    formed--;
                }
                
                //move the left pointer ahead, this would help to look for a new window.
                l++;
            }
            
            //keep expanding the window once we are done contracting.
            r++;
        }
        return ans[0] == -1 ? "": s.substring(ans[1], ans[2] + 1);
    }
}

'''
Approach 2: Optimized Sliding Window

Intuition

A small improvement to the above approach can reduce the time complexity of the algorithm 
to O(2∗∣filtered_S∣+∣S∣+∣T∣), where filtered_S is the string formed from S by removing all the elements not present in T.

This complexity reduction is evident when ∣filtered_S∣<<<∣S∣.

This kind of scenario might happen when length of string T is way too small than the length of string S 
and string S consists of numerous characters which are not present in T.

Algorithm

We create a list called filtered_S which has all the characters from string S along with their indices in S, but these 
characters should be present in T.
'''

import javafx.util.Pair;
class Solution {
    public String minWindow(String s, String t) {
        if (s.length() == 0 || t.length() == 0) {
            return "";
        }
        
        Map<Character, Integer> dictT = new HashMap<Character, Integer>();
        for (int i = 0; i < t.length(); i++) {
            int count = dictT.getOrDefault(t.charAt(i), 0);
            dictT.put(t.charAt(i), count + 1);
        }
        int required = dictT.size();
        
        //filter all the characters from s into a new list along with their index.
        //the filtering criteria is that the character should be present in t.
        List<Pair<Integer, Character>> filteredS = new ArrayList<Pair<Integer, Character>>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (dictT.containsKey(c)) {
                filteredS.add(new Pair<Integer, Character>(i, c));
            }
        }
        
        int l = 0, r = 0, formed = 0;
        Map<Character, Integer> windowCounts = new HashMap<Character, Integer>();
        int[] ans = {-1, 0, 0};
        
        //look for the characters only in the filtered list instead of entire s.
        //this helps to reduce our search.
        //hence we follow the sliding window approach on as small list.
        while (r < filteredS.size()) {
            char c = filteredS.get(r).getValue();
            int count = windowCounts.getOrDefault(c, 0);
            windowCounts.put(c, count + 1);
            
            if (dictT.containsKey(c) && windowCounts.get(c).intValue() == dictT.get(c).intValue()) {
                formed++;
            }
            
            //try and contract the window till the point where it ceases to be 'desirable'.
            while (l <= r && formed == required) {
                c = filteredS.get(l).getValue();
                
                //save the smallest window until now.
                int end = filteredS.get(r).getKey();
                int start = filteredS.get(l).getKey();
                if (ans[0] == -1 || end -start + 1 < ans[0]) {
                    ans[0] = end - start + 1;
                    ans[1] = start;
                    ans[2] = end;
                }
                
                windowCounts.put(c, windowCounts.get(c) - 1);
                if (dictT.containsKey(c) && windowCounts.get(c).intValue() < dictT.get(c).intValue()) {
                    formed--;
                }
                l++;
            }
            r++;
        }
        return ans[0] == -1 ? "" : s.substring(ans[1], ans[2] + 1);
    }
}

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
