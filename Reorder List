'''
Given a singly linked list L: L0→L1→…→Ln-1→Ln,
reorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…

You may not modify the values in the list's nodes, only nodes itself may be changed.

Example 1:

Given 1->2->3->4, reorder it to 1->4->2->3.

Example 2:

Given 1->2->3->4->5, reorder it to 1->5->2->4->3.

'''

# java

public void reorderList(ListNode head) {
    if(head == null || head.next == null) return;
    
    //find the middle of the list
    ListNode p1 = head;
    ListNode p2 = head;
    while(p2.next != null && p2.next.next != null) {
        p1 = p1.next;
        p2 = p2.next.next;
    }
    
    //reverse the half after middle 1->2->3->4->5->6 to 1->2->3->6->5->4
    ListNode preMiddle = p1;
    ListNode preCurrent = p1.next;
    while(preCurrent.next != null) {
        ListNode current = preCurrent.next;
        preCurrent.next = current.next;
        current.next = preMiddle.next;
        preMiddle.next = current;
    }
    
    //start reorder one by one 1->2->3->6->5->4 to 1->6->2->5->3->4
    p1 = head;
    p2 = preMiddle.next;
    while(p1 != preMiddle) {
        preMiddle.next = p2.next;
        p2.next = p1.next;
        p1.next = p2;
        p1 = p2.next;
        p2 = preMiddle.next;
    }
}


# java

public void reorderList(ListNode head) {
    HashMap<Integer, ListNode> map = new HashMap<>();
    for (int i = 1; head != null; head = head.next, i++) {
        map.put(i, head);
    }
    ListNode dummy = new ListNode(0);
    ListNode curr = dummy;
    for (int i = 1, j = map.size(); i <= j; i++, j--) {   //1, 2, 3, 4
        curr.next = map.get(i);                           //curr->1
        if(i != j) map.get(i).next = map.get(j);          //1->4
        map.get(j).next = null;                           //4->null
        curr = map.get(j);                                //curr=4, then 1->4
    }
}
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
