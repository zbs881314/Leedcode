'''
Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.

Example 1:

Input:nums = [1,1,1], k = 2
Output: 2

Note:

    The length of the array is in range [1, 20,000].
    The range of numbers in the array is [-1000, 1000] and the range of the integer k is [-1e7, 1e7].
'''

# answer
'''
Approach #1 Without space [Accepted]

Algorithm

Instead of considering all the start and end points and then finding the sum for each subarray corresponding to 
those points, we can directly find the sum on the go while considering different end points. i.e. We can choose a particular 
start point and while iterating over the end points, we can add the element corresponding to the end point to the sum formed 
till now. Whenver the sum equals the required k value, we can update the count value. We do so while iterating over all the 
end indices possible for every start index. Whenver, we update the start index, we need to reset the sum value to 0.
'''
# JAVA
public class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0;
        for (int start = 0; start < nums.length; start++) {
            int sum = 0;
            for (int end = start; end < nums.length; end++) {
                sum += nums[end];
                if (sum == k)
                    count++;
            }
        }
        return count;
    }
}

# time complexity O(n2)
# space complexity O(1)

'''
Approach #2 Using hashmap [Accepted]

Algorithm

The idea behind this approach is as follows: If the cumulative sum(repreesnted by sum[i] for sum upto ith index) upto two indices 
is the same, the sum of the elements lying in between those indices is zero. Extending the same thought further, if the 
cumulative sum upto two indices, say i and j is at a difference of k i.e. if sum[i]−sum[j]=k, the sum of elements lying between 
indices i and j is k.

Based on these thoughts, we make use of a hashmap map which is used to store the cumulative sum upto all the indices possible 
along with the number of times the same sum occurs. We store the data in the form: (sumi,no.ofoccurencesofsumi). We traverse over 
the array nums and keep on finding the cumulative sum. Every time we encounter a new sum, we make a new entry in the hashmap 
corresponding to that sum. If the same sum occurs again, we increment the count corresponding to that sum in the hashmap. Further,
for every sum encountered, we also determine the number of times the sum sum−k has occured already, since it will determine the 
number of times a subarray with sum k has occured upto the current index. We increment the count by the same amount.

After the complete array has been traversed, the count gives the required result.

The animation below depicts the process.
'''
# JAVA

public class Solution {
    public int subarraySum(int[] nums, int k) {
        int count = 0, sum = 0;
        HashMap <Integer, Integer> map = new HashMap <> ();
        map.put(0, 1);
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            if (map.containsKey(sum - k))
                count += map.get(sum - k);
            map.put(sum, map.getOrDefault(sum, 0) + 1);
        }
        return count;
    }
}

# time complexity O(n)
# space complexity O(n)

        
        
        
        
        
        
        
